<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[/home/andreas]]></title>
  <link href="http://aprell.github.io/atom.xml" rel="self"/>
  <link href="http://aprell.github.io/"/>
  <updated>2015-02-21T22:15:03+01:00</updated>
  <id>http://aprell.github.io/</id>
  <author>
    <name><![CDATA[Andreas Prell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[More Lua Gotchas]]></title>
    <link href="http://aprell.github.io/blog/2015/02/21/more-lua-gotchas/"/>
    <updated>2015-02-21T18:49:01+01:00</updated>
    <id>http://aprell.github.io/blog/2015/02/21/more-lua-gotchas</id>
    <content type="html"><![CDATA[<p>Speaking of Lua gotchas, here&rsquo;s another one. Assume you have a simple function
for mapping over tables (sequences):</p>

<!--more-->




<div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">m</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">do</span>
        <span class="nb">table.insert</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">f</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
    <span class="k">end</span>
    <span class="k">return</span> <span class="n">m</span>
<span class="k">end</span></code></pre></div>


<p><code>map</code> seems to work as expected, for instance,</p>

<div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="n">map</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="k">function</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">return</span> <span class="n">a</span><span class="o">^</span><span class="mi">2</span> <span class="k">end</span><span class="p">)</span></code></pre></div>


<p>returns a table with the numbers 1, 4, and 9. Nice. How about printing each
element of a table? We might consider using something like</p>

<div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="n">map</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="nb">print</span><span class="p">)</span></code></pre></div>


<p>Whoops!</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">1
lua: nothing.lua:4: wrong number of arguments to &#39;insert&#39;
stack traceback:
    [C]: in function &#39;insert&#39;
    nothing.lua:4: in function &#39;map&#39;
    nothing.lua:10: in main chunk
    [C]: in ?</code></pre></div>


<p>Let&rsquo;s see, what happened&hellip; <code>table.insert</code> got the wrong number of arguments
and bailed out. The problem is that <code>print</code> has no return value. There&rsquo;s a
difference between returning nothing and returning <code>nil</code>, as we swiftly
convince ourselves:</p>

<div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="n">map</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="k">function</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="k">return</span> <span class="kc">nil</span> <span class="k">end</span><span class="p">)</span></code></pre></div>


<p>correctly prints the numbers 1 to 3. To force exactly one result, we can
assign <code>f(v)</code> to a variable or put an extra pair of parentheses around the
function call. If <code>f</code> is a function that returns nothing, the result will be
<code>nil</code>, as if <code>f</code> returned <code>nil</code> in the first place. Changing <code>f(v)</code> to
<code>(f(v))</code> in the definition of <code>map</code> does the trick, and <code>map({1, 2, 3},
print)</code> now works as intended.</p>

<p>To summarize, all three functions</p>

<div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="k">function</span> <span class="nf">f</span><span class="p">()</span> <span class="k">end</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">g</span><span class="p">()</span> <span class="k">return</span> <span class="k">end</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">h</span><span class="p">()</span> <span class="k">return</span> <span class="kc">nil</span> <span class="k">end</span></code></pre></div>


<p>produce a result of <code>nil</code> when used liked this:</p>

<div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="n">x</span> <span class="o">=</span> <span class="n">f</span><span class="p">();</span> <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="c1">-- nil</span>
<span class="kd">local</span> <span class="n">y</span> <span class="o">=</span> <span class="n">g</span><span class="p">();</span> <span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="c1">-- nil</span>
<span class="kd">local</span> <span class="n">z</span> <span class="o">=</span> <span class="n">h</span><span class="p">();</span> <span class="nb">print</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="c1">-- nil</span></code></pre></div>


<p>But only <code>h</code> does in fact <em>return</em> <code>nil</code>, whereas <code>f</code> and <code>g</code> return nothing:</p>

<div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="p">())</span> <span class="c1">--</span>
<span class="nb">print</span><span class="p">(</span><span class="n">g</span><span class="p">())</span> <span class="c1">--</span>
<span class="nb">print</span><span class="p">(</span><span class="n">h</span><span class="p">())</span> <span class="c1">-- nil</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua Gotchas]]></title>
    <link href="http://aprell.github.io/blog/2014/12/21/lua-gotchas/"/>
    <updated>2014-12-21T18:26:15+01:00</updated>
    <id>http://aprell.github.io/blog/2014/12/21/lua-gotchas</id>
    <content type="html"><![CDATA[<p>Lua is one of my favorite programming languages. Lua is easy to learn, but not
entirely without <a href="http://www.luafaq.org/gotchas.html">gotchas</a> if you&rsquo;re used to other languages. One gotcha is
related to for-loops. What do you think the following piece of code will
print?</p>

<!--more-->




<div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span> <span class="k">do</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">then</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">end</span>
<span class="k">end</span></code></pre></div>


<p>The numbers from one to five except four? Because that&rsquo;s what the equivalent
loop in C++ would print:</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>Except it&rsquo;s not equivalent. Lua&rsquo;s for-loops are implemented in terms of while.
Above example is translated to:</p>

<div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="k">do</span>
    <span class="kd">local</span> <span class="n">_i</span><span class="p">,</span> <span class="n">_end</span><span class="p">,</span> <span class="n">_step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">_i</span> <span class="o">&lt;=</span> <span class="n">_end</span> <span class="k">do</span>
        <span class="kd">local</span> <span class="n">i</span> <span class="o">=</span> <span class="n">_i</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">then</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">end</span>
        <span class="n">_i</span> <span class="o">=</span> <span class="n">_i</span> <span class="o">+</span> <span class="n">_step</span>
    <span class="k">end</span>
<span class="k">end</span></code></pre></div>


<p>Quoting from <a href="http://www.lua.org/pil/4.3.4.html">Programming in Lua</a>:</p>

<blockquote>The for loop has some subtleties that you should learn in order to
make good use of it. First, all three expressions are evaluated once, before
the loop starts. [&#8230;] Second, the control variable is a local variable
automatically declared by the for statement and is visible only inside the
loop. [&#8230;] Third, you should never change the value of the control
variable.</blockquote>




<!--References-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Mesh 2014]]></title>
    <link href="http://aprell.github.io/blog/2014/11/13/code-mesh-2014/"/>
    <updated>2014-11-13T21:15:39+01:00</updated>
    <id>http://aprell.github.io/blog/2014/11/13/code-mesh-2014</id>
    <content type="html"><![CDATA[<p>Two of my personal highlights from <a href="http://www.codemesh.io">Code Mesh</a> in one picture: QuickCheck
and Idris. :)</p>

<!--more-->




<p align="center">
<img src="http://aprell.github.io/images/codemesh2014.jpg" title="QuickCheck Evolution presented by John Hughes" alt="Code Mesh 2014" width="800"/>
</p>




<!--References-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Masterminds of Programming]]></title>
    <link href="http://aprell.github.io/blog/2014/10/11/masterminds-of-programming/"/>
    <updated>2014-10-11T17:19:43+02:00</updated>
    <id>http://aprell.github.io/blog/2014/10/11/masterminds-of-programming</id>
    <content type="html"><![CDATA[<p>A few interesting and amusing quotes from the book <a href="http://shop.oreilly.com/product/9780596515171.do">Masterminds of
Programming</a>:</p>

<!--more-->




<blockquote>Some 20 years ago I wanted to develop a tool to design VLSI chips.
I didn&#8217;t have a Forth for my new PC, so I thought I&#8217;d try a different
approach: machine language. Not assembler language, but actually typing the
hex instructions. [&#8230;] My conclusion was that Forth is more efficient than
machine language. Partly because of its interactivity and partly because of
its syntax.<br>&#8212;Charles Moore</blockquote>




<blockquote>My opinion is that OOP is one of the great frauds perpetrated on
the community. [&#8230;] OOP was designed so that its clients could claim superior
wisdom for being on the &#8220;inside&#8221;. The truth of the matter is that the single
most important aspect of OOP is an approach devised decades ago: encapsulation
of subroutines and data. All the rest is frosting.<br>&#8212;Thomas E.
Kurtz</blockquote>




<blockquote>The best way to avoid tough debugging is to write things very
carefully in the first place.<br>&#8212;Brian Kernighan</blockquote>




<blockquote>Software engineering is in many ways a very pathetic field,
because so much of it is anecdotal and based on people&#8217;s judgments or even
people&#8217;s aesthetic judgments.<br>&#8212;Peter Weinberger</blockquote>




<blockquote>C is a reasonably good language for compilers to generate, but the
idea that human beings should program in it is completely
absurd.<br>&#8212;Bertrand Meyer</blockquote>




<!--References-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrency for Parallelism?]]></title>
    <link href="http://aprell.github.io/blog/2014/10/03/concurrency-for-parallelism/"/>
    <updated>2014-10-03T20:35:36+02:00</updated>
    <id>http://aprell.github.io/blog/2014/10/03/concurrency-for-parallelism</id>
    <content type="html"><![CDATA[<p>So, following up on the previous post, what is the difference between
concurrent programming and parallel programming?</p>

<!--more-->


<p>In my view, concurrent programming is concerned with coordination, whereas
parallel programming is concerned with efficiency. In a way, you could say
parallel programming is about avoiding coordination to the extent possible for
the sake of performance. It seems reasonable to assume that <a href="http://yosefk.com/blog/parallelism-and-concurrency-need-different-tools.html">concurrency and
parallelism call for different tools</a>.</p>

<p>Concurrent languages such as <a href="http://golang.org">Go</a> support parallelism basically out of the
box: create a number of independent tasks and make sure they are scheduled by
a pool of worker threads. Done in a few lines of code.  Problem solved?</p>

<p>I agree that a single set of concurrency constructs is too limiting for the
kind of parallel programs we&rsquo;d want to write. Consider parallel loops, for
example. Relatively straightforward to implement in Go, but <a href="http://www.golangpatterns.info/concurrency/parallel-for-loop">starting a
goroutine for each iteration</a>? Hardly practical. This is not to say that
goroutines and channels can&rsquo;t be used to implement parallel loops efficiently;
they can, it&rsquo;s just more work. But programmers shouldn&rsquo;t need to worry about
goroutines and channels when all they want to do is run some iterations of a
loop in parallel.</p>

<!--References-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrency versus Parallelism]]></title>
    <link href="http://aprell.github.io/blog/2014/09/24/concurrency-versus-parallelism/"/>
    <updated>2014-09-24T15:56:09+02:00</updated>
    <id>http://aprell.github.io/blog/2014/09/24/concurrency-versus-parallelism</id>
    <content type="html"><![CDATA[<p>Explain the difference between &ldquo;concurrency&rdquo; and &ldquo;parallelism&rdquo;. Easy, right.
Well&hellip; Depending on who you ask, the conclusion is either that <a href="http://books.google.de/books?id=J5-ckoCgc3IC&amp;lpg=PA1&amp;dq=introduction%20to%20concurrency&amp;hl=de&amp;pg=PP1#v=onepage&amp;q&amp;f=false">parallelism
implies concurrency</a> or that <a href="http://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency">parallelism has nothing to do with
concurrency</a>&hellip;</p>

<!--more-->


<p>The simplest definitions I can think of are: Concurrency is dealing with
multiple things at the same time (multiple things interleaved within the same
time frame). Parallelism is multiple things happening at the same time (truly
simultaneously).</p>

<p>That&rsquo;s all. No mention of processes or threads, just &ldquo;things&rdquo;, which might be
single instructions. Neither definition implies determinism or nondeterminism.
There is deterministic concurrency (coroutines) as well as nondeterministic
parallelism (threads). Concurrency may be the answer to our nondeterministic
woes, but concurrency per se is a more general concept. Ditto for parallelism.</p>

<p>Given above definitions, it seems plausible to think of parallelism as an
instance of concurrency: every parallel program is also a concurrent program.
If there&rsquo;s parallelism, and it doesn&rsquo;t look like we&rsquo;re dealing with multiple
things at the same time, it&rsquo;s because a lower level is taking care of it for
us.</p>

<p>Can concurrency exist independently of parallelism? Certainly! Can parallelism
exist independently of concurrency? That&rsquo;s the more interesting question. I&rsquo;m
tempted to say no.</p>

<!--References-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Blog]]></title>
    <link href="http://aprell.github.io/blog/2014/09/16/hello-blog/"/>
    <updated>2014-09-16T16:43:40+02:00</updated>
    <id>http://aprell.github.io/blog/2014/09/16/hello-blog</id>
    <content type="html"><![CDATA[<p>Random entries coming soon</p>
]]></content>
  </entry>
  
</feed>
