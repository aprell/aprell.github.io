<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | /home/andreas]]></title>
  <link href="http://aprell.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://aprell.github.io/"/>
  <updated>2015-08-21T22:08:29+02:00</updated>
  <id>http://aprell.github.io/</id>
  <author>
    <name><![CDATA[Andreas Prell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dependent Types in Haskell]]></title>
    <link href="http://aprell.github.io/blog/2015/08/20/dependent-types-in-haskell/"/>
    <updated>2015-08-20T21:58:46+02:00</updated>
    <id>http://aprell.github.io/blog/2015/08/20/dependent-types-in-haskell</id>
    <content type="html"><![CDATA[<p>It looks like GHC is getting closer to supporting dependent types with a patch
that <a href="https://typesandkinds.wordpress.com/2015/08/19/planned-change-to-ghc-merging-types-and-kinds">eliminates the distinction between types and kinds</a>. What is a
dependent type? Perhaps the most accessible introduction I&rsquo;ve seen so far is a
recently updated article on the merits of programming with (almost) dependent
types: <a href="http://okmij.org/ftp/Haskell/dependent-types.html">Approximate Dependent-Type Programming</a></p>

<!--more-->


<blockquote><p>An ordinary type such as <code>[a]</code> may depend on other types &ndash; in our case, the
types of list elements &ndash; but not on the values of those elements or their
number. A dependent type does depend on such dynamic values. [&hellip;] One
should distinguish a dependent type (which depends on a dynamic value) from
a polymorphic type such as <code>Maybe a</code>. The type <code>List n a</code> from our running
example is indexed by the value (the list length) and by the type (of its
elements): it is both dependent (in <code>n</code>) and polymorphic (or, technically,
parametric), in <code>a</code>.</p></blockquote>

<p>In other words, <code>List n a</code> is parameterized by a value in addition to a type.</p>

<blockquote><p>The different nature of the two arguments in <code>List n a</code> has many
consequences: since the list length <code>n</code> is a natural number, one may apply
to it any operation on natural numbers such as addition, increment,
multiplication, etc.</p></blockquote>

<p>The article brings up an interesting example in which the type checker must be
convinced that <code>List (n+m) a</code> and <code>List (m+n) a</code> are the same type.</p>

<blockquote><p>Now, deciding if two types are the same involves determining if two
expressions are equal, which is generally undecidable (think of functions or
recursive expressions). There is a bigger problem: in our example, <code>n</code> and
<code>m</code> are just variables, whose values will be known only at run-time. The
type-checker, which runs at compile-time, therefore has to determine that
<code>n+m</code> is equal to <code>m+n</code> <em>without</em> knowing the concrete values of <code>n</code> and
<code>m</code>. We know that natural addition is commutative, but the type-checker does
not. It is usually not so smart to figure out the commutativity from the
definition of addition. Therefore, we have to somehow supply the <em>proof</em> of
the commutativity to the type-checker. Programming with dependent types
involves a great deal of theorem proving.</p></blockquote>

<!--References-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Lua Gotchas]]></title>
    <link href="http://aprell.github.io/blog/2015/02/21/more-lua-gotchas/"/>
    <updated>2015-02-21T18:49:01+01:00</updated>
    <id>http://aprell.github.io/blog/2015/02/21/more-lua-gotchas</id>
    <content type="html"><![CDATA[<p>Speaking of Lua gotchas, here&rsquo;s another one. Assume you have a simple function
for mapping over tables (sequences):</p>

<!--more-->


<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">m</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">do</span>
        <span class="nb">table.insert</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">f</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
    <span class="k">end</span>
    <span class="k">return</span> <span class="n">m</span>
<span class="k">end</span></code></pre></div></p>

<p><code>map</code> seems to work as expected, for instance,</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="n">map</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="k">function</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">return</span> <span class="n">a</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="k">end</span><span class="p">)</span></code></pre></div></p>

<p>returns a table with the numbers 1, 4, and 9. Nice. How about printing each
element of a table? We might consider using something like</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="n">map</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="nb">print</span><span class="p">)</span></code></pre></div></p>

<p>Whoops!</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">1
lua: nothing.lua:4: wrong number of arguments to &amp;lsquo;insert&amp;rsquo;
stack traceback:
    [C]: in function &amp;lsquo;insert&amp;rsquo;
    nothing.lua:4: in function &amp;lsquo;map&amp;rsquo;
    nothing.lua:10: in main chunk
    [C]: in ?</code></pre></div></p>

<p>Let&rsquo;s see&hellip; <code>table.insert</code> got the wrong number of arguments and bailed out.
The problem is that <code>print</code> has no return value. There&rsquo;s a difference between
returning nothing and returning <code>nil</code>, as we convince ourselves:</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="n">map</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="k">function</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="k">return</span> <span class="kc">nil</span> <span class="k">end</span><span class="p">)</span></code></pre></div></p>

<p>correctly prints the numbers 1 to 3. To force exactly one result, we can
assign <code>f(v)</code> to a variable or put an extra pair of parentheses around the
function call. If <code>f</code> is a function that returns nothing, the result will be
<code>nil</code>, as if <code>f</code> returned <code>nil</code> in the first place. Changing <code>f(v)</code> to
<code>(f(v))</code> in the definition of <code>map</code> does the trick, and <code>map({1, 2, 3},
print)</code> now works as intended.</p>

<p>To summarize, all three functions</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="k">function</span> <span class="nf">f</span><span class="p">()</span> <span class="k">end</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">g</span><span class="p">()</span> <span class="k">return</span> <span class="k">end</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">h</span><span class="p">()</span> <span class="k">return</span> <span class="kc">nil</span> <span class="k">end</span></code></pre></div></p>

<p>produce a result of <code>nil</code> when used liked this:</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="n">x</span> <span class="o">=</span> <span class="n">f</span><span class="p">();</span> <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kc">nil</span>
<span class="kd">local</span> <span class="n">y</span> <span class="o">=</span> <span class="n">g</span><span class="p">();</span> <span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kc">nil</span>
<span class="kd">local</span> <span class="n">z</span> <span class="o">=</span> <span class="n">h</span><span class="p">();</span> <span class="nb">print</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kc">nil</span></code></pre></div></p>

<p>But only <code>h</code> does in fact <em>return</em> <code>nil</code>, whereas <code>f</code> and <code>g</code> return nothing:</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">g</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">h</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kc">nil</span></code></pre></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua Gotchas]]></title>
    <link href="http://aprell.github.io/blog/2014/12/21/lua-gotchas/"/>
    <updated>2014-12-21T18:26:15+01:00</updated>
    <id>http://aprell.github.io/blog/2014/12/21/lua-gotchas</id>
    <content type="html"><![CDATA[<p>Lua is one of my favorite programming languages. Lua is easy to learn, but not
entirely without <a href="http://www.luafaq.org/gotchas.html">gotchas</a> if you&rsquo;re used to other languages. One gotcha is
related to for-loops. What do you think the following piece of code will
print?</p>

<!--more-->


<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span> <span class="k">do</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">then</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">end</span>
<span class="k">end</span></code></pre></div></p>

<p>The numbers from 1 to 5, skipping 4? Because that&rsquo;s what we expect from an
equivalent loop in, say, C++:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span></code></pre></div></p>

<p>Except it&rsquo;s not equivalent. Lua&rsquo;s for-loops are implemented in terms of while.
Above example is translated to:</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="k">do</span>
    <span class="kd">local</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="k">end</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="k">end</span> <span class="k">do</span>
        <span class="kd">local</span> <span class="n">i</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">then</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">end</span>
        <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span> <span class="o">+</span> <span class="n">_step</span>
    <span class="k">end</span>
<span class="k">end</span></code></pre></div></p>

<p>Quoting from <a href="http://www.lua.org/pil/4.3.4.html">Programming in Lua</a>:</p>

<blockquote>The for loop has some subtleties that you should learn in order to
make good use of it. First, all three expressions are evaluated once, before
the loop starts. [&#8230;] Second, the control variable is a local variable
automatically declared by the for statement and is visible only inside the
loop. [&#8230;] Third, you should never change the value of the control
variable.</blockquote>




<!--References-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Masterminds of Programming]]></title>
    <link href="http://aprell.github.io/blog/2014/10/11/masterminds-of-programming/"/>
    <updated>2014-10-11T17:19:43+02:00</updated>
    <id>http://aprell.github.io/blog/2014/10/11/masterminds-of-programming</id>
    <content type="html"><![CDATA[<p>A few interesting and amusing quotes from the book <a href="http://shop.oreilly.com/product/9780596515171.do">Masterminds of
Programming</a>:</p>

<!--more-->




<blockquote>Some 20 years ago I wanted to develop a tool to design VLSI chips.
I didn&#8217;t have a Forth for my new PC, so I thought I&#8217;d try a different
approach: machine language. Not assembler language, but actually typing the
hex instructions. [&#8230;] My conclusion was that Forth is more efficient than
machine language. Partly because of its interactivity and partly because of
its syntax.<br>&#8212;Charles Moore</blockquote>




<blockquote>My opinion is that OOP is one of the great frauds perpetrated on
the community. [&#8230;] OOP was designed so that its clients could claim superior
wisdom for being on the &#8220;inside&#8221;. The truth of the matter is that the single
most important aspect of OOP is an approach devised decades ago: encapsulation
of subroutines and data. All the rest is frosting.<br>&#8212;Thomas E.
Kurtz</blockquote>




<blockquote>The best way to avoid tough debugging is to write things very
carefully in the first place.<br>&#8212;Brian Kernighan</blockquote>




<blockquote>Software engineering is in many ways a very pathetic field,
because so much of it is anecdotal and based on people&#8217;s judgments or even
people&#8217;s aesthetic judgments.<br>&#8212;Peter Weinberger</blockquote>




<blockquote>C is a reasonably good language for compilers to generate, but the
idea that human beings should program in it is completely
absurd.<br>&#8212;Bertrand Meyer</blockquote>




<!--References-->



]]></content>
  </entry>
  
</feed>
