<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lua | /home/andreas]]></title>
  <link href="http://aprell.github.io/blog/categories/lua/atom.xml" rel="self"/>
  <link href="http://aprell.github.io/"/>
  <updated>2015-02-21T19:24:45+01:00</updated>
  <id>http://aprell.github.io/</id>
  <author>
    <name><![CDATA[Andreas Prell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[More Lua Gotchas]]></title>
    <link href="http://aprell.github.io/blog/2015/02/21/more-lua-gotchas/"/>
    <updated>2015-02-21T18:49:01+01:00</updated>
    <id>http://aprell.github.io/blog/2015/02/21/more-lua-gotchas</id>
    <content type="html"><![CDATA[<p>Speaking of Lua gotchas, here&rsquo;s another one. Assume you have a simple function
for mapping over tables (sequences):</p>

<!--more-->


<pre><code class="lua">local function map(t, f)
    local m = {}
    for _, v in ipairs(t) do
        table.insert(m, f(v))
    end
    return m
end
</code></pre>

<p><code>map</code> seems to work as expected, for instance,</p>

<pre><code class="lua">map({1, 2, 3}, function (a) return a^2 end)
</code></pre>

<p>returns a table with the numbers 1, 4, and 9. Nice. How about printing each
element of a table? We might consider using something like</p>

<pre><code class="lua">map({1, 2, 3}, print)
</code></pre>

<p>Whoops!</p>

<pre><code class="text">1
lua: nothing.lua:4: wrong number of arguments to 'insert'
stack traceback:
    [C]: in function 'insert'
    nothing.lua:4: in function 'map'
    nothing.lua:10: in main chunk
    [C]: in ?
</code></pre>

<p>Let&rsquo;s see, what happened&hellip; <code>table.insert</code> got the wrong number of arguments
and bailed out. The problem is that <code>print</code> has no return value. There&rsquo;s a
difference between returning nothing and returning <code>nil</code>, as we swiftly convince
ourselves:</p>

<pre><code class="lua">map({1, 2, 3}, function (a) print(a); return nil end)
</code></pre>

<p>correctly prints the numbers 1 to 3. To force exactly one result, we can
assign <code>f(v)</code> to a variable or put an extra pair of parentheses around the
function call. If <code>f</code> is a function that returns nothing, the result will be
<code>nil</code>, as if <code>f</code> returned <code>nil</code> in the first place. Changing <code>f(v)</code> to
<code>(f(v))</code> in the definition of <code>map</code> does the trick, and <code>map({1, 2, 3},
print)</code> now works as intended.</p>

<p>To summarize, all three functions</p>

<pre><code class="lua">local function f() end
local function g() return end
local function h() return nil end
</code></pre>

<p>produce a result of <code>nil</code> when used liked this:</p>

<pre><code class="lua">local x = f(); print(x) -- nil
local y = g(); print(y) -- nil
local z = h(); print(z) -- nil
</code></pre>

<p>But only <code>h</code> does in fact <em>return</em> <code>nil</code>, whereas <code>f</code> and <code>g</code> return nothing:</p>

<pre><code class="lua">print(f()) --
print(g()) --
print(h()) -- nil
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua Gotchas]]></title>
    <link href="http://aprell.github.io/blog/2014/12/21/lua-gotchas/"/>
    <updated>2014-12-21T18:26:15+01:00</updated>
    <id>http://aprell.github.io/blog/2014/12/21/lua-gotchas</id>
    <content type="html"><![CDATA[<p>Lua is one of my favorite programming languages. Lua is easy to learn, but not
entirely without <a href="http://www.luafaq.org/gotchas.html">gotchas</a> if you&rsquo;re used to other languages. One gotcha is
related to for-loops. What do you think the following piece of code will
print?</p>

<!--more-->


<pre><code class="lua">for i = 1, 5 do
    print(i)
    if i == 3 then i = i + 1 end
end
</code></pre>

<p>The numbers from one to five except four? Because that&rsquo;s what the equivalent
loop in C++ would print:</p>

<pre><code class="c++">for (int i = 1; i &lt;= 5; i++) {
    std::cout &lt;&lt; i &lt;&lt; "\n";
    if (i == 3) i++;
}
</code></pre>

<p>Except it&rsquo;s not equivalent. Lua&rsquo;s for-loops are implemented in terms of while.
Above example is translated to:</p>

<pre><code class="lua">do
    local _i, _end, _step = 1, 5, 1
    while _i &lt;= _end do
        local i = _i
        print(i)
        if i == 3 then i = i + 1 end
        _i = _i + _step
    end
end
</code></pre>

<p>Quoting from <a href="http://www.lua.org/pil/4.3.4.html">Programming in Lua</a>:</p>

<blockquote>The for loop has some subtleties that you should learn in order to
make good use of it. First, all three expressions are evaluated once, before
the loop starts. [&#8230;] Second, the control variable is a local variable
automatically declared by the for statement and is visible only inside the
loop. [&#8230;] Third, you should never change the value of the control
variable.</blockquote>




<!--References-->



]]></content>
  </entry>
  
</feed>
