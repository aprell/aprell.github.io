<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lua | /home/andreas]]></title>
  <link href="http://aprell.github.io/blog/categories/lua/atom.xml" rel="self"/>
  <link href="http://aprell.github.io/"/>
  <updated>2016-04-23T16:33:27+02:00</updated>
  <id>http://aprell.github.io/</id>
  <author>
    <name><![CDATA[Andreas Prell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[More Lua Gotchas]]></title>
    <link href="http://aprell.github.io/blog/2015/02/21/more-lua-gotchas/"/>
    <updated>2015-02-21T18:49:01+01:00</updated>
    <id>http://aprell.github.io/blog/2015/02/21/more-lua-gotchas</id>
    <content type="html"><![CDATA[<p>Speaking of Lua gotchas, here&rsquo;s another one. In Lua, a function with <em>n</em>
parameters is similar to a variadic function. As an example, consider:</p>

<!--more-->


<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="k">function</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="k">end</span></code></pre></div></p>

<p>We can call <code>f</code> with as many arguments as we like. Missing arguments become
<code>nil</code>, extra arguments are discarded:</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="n">f</span><span class="p">()</span>        <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kc">nil</span> <span class="kc">nil</span>
<span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>       <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="mi">1</span>   <span class="kc">nil</span>
<span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>    <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="mi">1</span>   <span class="mi">2</span>
<span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="mi">1</span>   <span class="mi">2</span></code></pre></div></p>

<p>In fact, function <code>f</code> could be written as:</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="k">function</span> <span class="nf">f</span><span class="p">(</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;)</span>
    <span class="kd">local</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="k">end</span></code></pre></div></p>

<p>The <a href="http://www.lua.org/manual/5.2/manual.html#3.3.3">reference manual</a> has the following to say about <code>local a, b = ...</code>:</p>

<blockquote>Before the assignment, the list of values is <i>adjusted</i> to
the length of the list of variables. If there are more values than needed, the
excess values are thrown away. If there are fewer values than needed, the list
is extended with as many <b>nil</b>&#8217;s as needed. If the list of expressions
ends with a function call, then all values returned by that call enter the
list of values, before the adjustment (except when the call is enclosed in
parentheses; see ยง3.4).</blockquote>


<p>There is no observable difference, whether we call <code>f(1)</code> or <code>f(1, nil)</code>. But
for some functions, there is. Suppose we have</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="nb">table.insert</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">g</span><span class="p">())</span></code></pre></div></p>

<p>where <code>t</code> is a table and <code>g</code> is a function that may or may not return a value.
As long as <code>g</code> returns a value, including <code>nil</code>, everything works as expected.
(We don&rsquo;t mind appending <code>nil</code> to a table.)  When <code>g</code> happens to return
nothing, <code>table.insert</code> complains about a missing argument, which may be
<a href="http://lua-users.org/lists/lua-l/2011-02/msg01444.html">surprising</a>, considering that Lua is supposed to <a href="http://www.lua.org/pil/5.html">adjust the number of
arguments to the number of parameters</a>:</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">stdin:1: wrong number of arguments to &amp;lsquo;insert&amp;rsquo;
stack traceback:
    [C]: in function &amp;lsquo;insert&amp;rsquo;
    stdin:1: in main chunk
    [C]: in ?</code></pre></div></p>

<p>We can introduce a variable</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="n">b</span> <span class="o">=</span> <span class="n">g</span><span class="p">()</span>
<span class="nb">table.insert</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span></code></pre></div></p>

<p>or put parentheses around the call to <code>g</code></p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="nb">table.insert</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="p">(</span><span class="n">g</span><span class="p">()))</span></code></pre></div></p>

<p>to force exactly one result, turning nothing into <code>nil</code>, as if <code>g</code> returned
<code>nil</code>. And <code>nil</code> is not nothing. All three functions</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="k">function</span> <span class="nf">f</span><span class="p">()</span> <span class="k">end</span>
<span class="k">function</span> <span class="nf">g</span><span class="p">()</span> <span class="k">return</span> <span class="k">end</span>
<span class="k">function</span> <span class="nf">h</span><span class="p">()</span> <span class="k">return</span> <span class="kc">nil</span> <span class="k">end</span></code></pre></div></p>

<p>are interchangeable when used liked this:</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="n">x</span> <span class="o">=</span> <span class="n">f</span><span class="p">();</span> <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kc">nil</span>
<span class="kd">local</span> <span class="n">y</span> <span class="o">=</span> <span class="n">g</span><span class="p">();</span> <span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kc">nil</span>
<span class="kd">local</span> <span class="n">z</span> <span class="o">=</span> <span class="n">h</span><span class="p">();</span> <span class="nb">print</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kc">nil</span></code></pre></div></p>

<p>But only <code>h</code> returns <code>nil</code>, whereas <code>f</code> and <code>g</code> return nothing:</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">g</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">h</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="kc">nil</span></code></pre></div></p>

<!--References-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua Gotchas]]></title>
    <link href="http://aprell.github.io/blog/2014/12/21/lua-gotchas/"/>
    <updated>2014-12-21T18:26:15+01:00</updated>
    <id>http://aprell.github.io/blog/2014/12/21/lua-gotchas</id>
    <content type="html"><![CDATA[<p>Lua is one of my favorite programming languages. Lua is easy to learn, but not
entirely without <a href="http://www.luafaq.org/gotchas.html">gotchas</a> if you&rsquo;re used to other languages. One gotcha is
related to for-loops. What do you think the following piece of code will
print?</p>

<!--more-->


<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span> <span class="k">do</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">then</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">end</span>
<span class="k">end</span></code></pre></div></p>

<p>The numbers from 1 to 5, skipping 4? Because that&rsquo;s what we expect from an
equivalent loop in, say, C++:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span></code></pre></div></p>

<p>Except it&rsquo;s not equivalent. Lua&rsquo;s for-loops are implemented in terms of while.
Above example is translated to:</p>

<p><div class="highlight"><pre><code class="language-lua" data-lang="lua"><span class="k">do</span>
    <span class="kd">local</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="k">end</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="k">end</span> <span class="k">do</span>
        <span class="kd">local</span> <span class="n">i</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">then</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">end</span>
        <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">i</span> <span class="o">+</span> <span class="n">_step</span>
    <span class="k">end</span>
<span class="k">end</span></code></pre></div></p>

<p>Quoting from <a href="http://www.lua.org/pil/4.3.4.html">Programming in Lua</a>:</p>

<blockquote>The for loop has some subtleties that you should learn in order to
make good use of it. First, all three expressions are evaluated once, before
the loop starts. [&#8230;] Second, the control variable is a local variable
automatically declared by the for statement and is visible only inside the
loop. [&#8230;] Third, you should never change the value of the control
variable.</blockquote>




<!--References-->



]]></content>
  </entry>
  
</feed>
