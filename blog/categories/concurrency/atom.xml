<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: concurrency | /home/andreas]]></title>
  <link href="http://aprell.github.io/blog/categories/concurrency/atom.xml" rel="self"/>
  <link href="http://aprell.github.io/"/>
  <updated>2019-09-15T19:20:28+02:00</updated>
  <id>http://aprell.github.io/</id>
  <author>
    <name><![CDATA[Andreas Prell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Concurrency for Parallelism?]]></title>
    <link href="http://aprell.github.io/blog/2014/10/03/concurrency-for-parallelism/"/>
    <updated>2014-10-03T20:35:36+02:00</updated>
    <id>http://aprell.github.io/blog/2014/10/03/concurrency-for-parallelism</id>
    <content type="html"><![CDATA[<p>So, following up on the previous post, what is the difference between
concurrent programming and parallel programming?</p>

<!--more-->


<p>In my view, concurrent programming is concerned with coordination, whereas
parallel programming is concerned with efficiency. In a way, you could say
parallel programming is about avoiding coordination to the extent possible for
the sake of performance. It seems reasonable to assume that <a href="http://yosefk.com/blog/parallelism-and-concurrency-need-different-tools.html">concurrency and
parallelism call for different tools</a>.</p>

<p>Concurrent languages such as <a href="http://golang.org">Go</a> support parallelism basically out of the
box: create a number of independent tasks and make sure they are scheduled by
a pool of worker threads. Done in a few lines of code. Problem solved?</p>

<p>I agree that a single set of concurrency constructs is too limiting for the
kind of parallel programs we&rsquo;d want to write. Consider parallel loops, for
example. Relatively straightforward to implement in Go, but <a href="http://www.golangpatterns.info/concurrency/parallel-for-loop">starting a
goroutine for each iteration</a>? Hardly practical. This is not to say that
goroutines and channels can&rsquo;t be used to implement parallel loops efficiently;
they can, it&rsquo;s just more work. But programmers shouldn&rsquo;t have to worry about
goroutines and channels when all they want to do is run some iterations of a
loop in parallel.</p>

<!--References-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrency versus Parallelism]]></title>
    <link href="http://aprell.github.io/blog/2014/09/24/concurrency-versus-parallelism/"/>
    <updated>2014-09-24T15:56:09+02:00</updated>
    <id>http://aprell.github.io/blog/2014/09/24/concurrency-versus-parallelism</id>
    <content type="html"><![CDATA[<p>Explain the difference between &ldquo;concurrency&rdquo; and &ldquo;parallelism&rdquo;. Easy, right.
Well&hellip; Depending on who you ask, the conclusion is either that <a href="http://books.google.de/books?id=J5-ckoCgc3IC&amp;lpg=PA1&amp;dq=introduction%20to%20concurrency&amp;hl=de&amp;pg=PP1#v=onepage&amp;q&amp;f=false">parallelism
implies concurrency</a> or that <a href="http://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency">parallelism has nothing to do with
concurrency</a>&hellip;</p>

<!--more-->


<p>The simplest definitions I can think of are: Concurrency is dealing with
multiple things at the same time (multiple things interleaved within the same
time frame). Parallelism is multiple things happening at the same time (truly
simultaneously).</p>

<p>That&rsquo;s all. No mention of processes or threads, just &ldquo;things&rdquo;, which might be
single instructions. Neither definition implies determinism or nondeterminism.
There is deterministic concurrency (coroutines) as well as nondeterministic
parallelism (threads). Concurrency may be the answer to our nondeterministic
woes, but concurrency per se is a more general concept. Ditto for parallelism.</p>

<p>Given above definitions, it seems plausible to think of parallelism as an
instance of concurrency: every parallel program is also a concurrent program.
If there&rsquo;s parallelism, and it doesn&rsquo;t look like we&rsquo;re dealing with multiple
things at the same time, it&rsquo;s because a lower level is taking care of it for
us.</p>

<p>Can concurrency exist independently of parallelism? Certainly! Can parallelism
exist independently of concurrency? That&rsquo;s the more interesting question. I&rsquo;m
tempted to say no.</p>

<!--References-->



]]></content>
  </entry>
  
</feed>
